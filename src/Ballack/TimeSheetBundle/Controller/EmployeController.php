<?php

namespace Ballack\TimeSheetBundle\Controller;

use Ballack\TimeSheetBundle\Util\DictionaryProjet;
use FOS\UserBundle\Form\Type\ProfileFormType;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Ballack\TimeSheetBundle\Entity\Employe;
use Ballack\TimeSheetBundle\Form\EmployeType;
use Symfony\Component\HttpFoundation\JsonResponse;
use DateInterval;
use Ballack\TimeSheetBundle\Util\Util;
use Ballack\TimeSheetBundle\Form\EmployeEditType;

/**
 * Employe controller.
 *
 */
class EmployeController extends Controller {

    /**
     * Lists all Employe entities.
     *
     */
    public function indexAction(Request $request) {
        $em = $this->getDoctrine()->getManager();

        $employes = $em->getRepository('BallackTimeSheetBundle:Employe')->findAll();
//        $paginator = $this->get('knp_paginator');
//        $pagination = $paginator->paginate($employes, /* query NOT result */
//            $request->query->getInt('page', 1)/*page number*/, 3/*limit per page*/);

        return $this->render('BallackTimeSheetBundle:employe:index.html.twig', array(
//            'employes' => $employes, 'pagination' => $pagination,
                    'employes' => $employes));
    }

    public function searchAction(Request $request) {
        $em = $this->getDoctrine()->getManager();

        $employes = $em->getRepository('BallackTimeSheetBundle:Employe')->findByNom($this->getRequest()->get('nom'));

        $resp = new JsonResponse();
        return $resp->setData(array('employes' => $employes->getNom()));
    }

    /**
     * Creates a new Employe entity.
     *
     */
    public function newAction(Request $request) {
        $employe = new Employe();
        $form = $this->createForm(new EmployeType(), $employe);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            //$file = $employe->getImage();
            //$fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
            // moves the file to the directory where brochures are stored
//            $file->move(
//                    $this->getParameter('images_directory'), $fileName
//            );
            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            //$employe->setImage($fileName);
            $employe->setOvertime(0.0);
            $employe->setSoldeVacances(0);
            $em->persist($employe->getCompte());
            $em->persist($employe);
            $em->flush();

            return $this->redirectToRoute('employe_addImage', array('id' => $employe->getId()));
        }

        return $this->render('BallackTimeSheetBundle:employe:new.html.twig', array(
                    'employe' => $employe,
                    'form' => $form->createView(),
        ));
    }

    /**
     * @return string
     */
    private function generateUniqueFileName() {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * Finds and displays a Employe entity.
     *
     */
    public function showAction(Employe $employe) {
        $deleteForm = $this->createDeleteForm($employe);

        return $this->render('BallackTimeSheetBundle:employe:show.html.twig', array(
                    'employe' => $employe,
                    'delete_form' => $deleteForm->createView(),
        ));
    }

    /**
     * Displays a form to edit an existing Employe entity.
     *
     */
    public function editAction(Request $request, Employe $employe) {
        $deleteForm = $this->createDeleteForm($employe);
        // $editForm = $this->createForm(new EmployeType(), $employe);
        //$profile=$this->createForm(new ProfileFormType(),$employe);
        $compte = $employe->getCompte();
        $editForm = $this->createForm(new EmployeEditType(), $employe);
        $formFactory = $this->get('fos_user.profile.form.factory');
        $formFactory1 = $this->get('fos_user.change_password.form.factory');
        $form_changepassword = $formFactory1->createForm();
        $form = $formFactory->createForm();
        $form->setData($compte);
        $form_changepassword->setData($compte);
        
        $form->handleRequest($request);
        $form_changepassword->handleRequest($request);
        $editForm->handleRequest($request);
        //$profile->handleRequest($request);
         if ($form_changepassword->isSubmitted() && $form_changepassword->isValid()) {
            $em = $this->getDoctrine()->getManager();

            $em->persist($compte);
            $em->flush();

            return $this->redirectToRoute('employe_edit', array('id' => $employe->getId()));
        }
        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();

            $em->persist($compte);
            $em->flush();

            return $this->redirectToRoute('employe_edit', array('id' => $employe->getId()));
        }
        if ($editForm->isSubmitted() && $editForm->isValid()) {
            $em = $this->getDoctrine()->getManager();
            // $file = $employe->getImage();
            // $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
            // moves the file to the directory where brochures are stored
//            $file->move(
//                $this->getParameter('images_directory'),
//                $fileName
//            );
            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            //$employe->setImage($fileName);
            $employe->setCompte($compte);
            $em->persist($employe);
            $em->flush();

            return $this->redirectToRoute('employe_edit', array('id' => $employe->getId()));
        }

        return $this->render('BallackTimeSheetBundle:employe:edit.html.twig', array(
                    'employe' => $employe,
                    'edit_form' => $editForm->createView(),
                    'delete_form' => $deleteForm->createView(),
                    'form' => $form->createView(),'form_chpass'=>$form_changepassword->createView(),
        ));
    }

    /**
     * Deletes a Employe entity.
     *
     */
    public function deleteAction(Request $request, Employe $employe) {
        $form = $this->createDeleteForm($employe);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->remove($employe);
            $em->flush();
        }

        return $this->redirectToRoute('employe_index');
    }

    /**
     * Creates a form to delete a Employe entity.
     *
     * @param Employe $employe The Employe entity
     *
     * @return \Symfony\Component\Form\Form The form
     */
    private function createDeleteForm(Employe $employe) {
        return $this->createFormBuilder()
                        ->setAction($this->generateUrl('employe_delete', array('id' => $employe->getId())))
                        ->setMethod('DELETE')
                        ->getForm();
    }

    public function roleAction(Employe $employe) {
        $em = $this->getDoctrine()->getManager();
        $user = $employe->getCompte();
        $form = $this->createFormBuilder($user)
                ->add('roles', 'collection', array(
                    'type' => 'choice',
                    'options' => array(
                        'choices' => array(
                            'ROLE_ADMIN' => 'ROLE_ADMIN', 'ROLE_USER' => 'ROLE_USER', 'ROLE_CHEF' => 'ROLE_CHEF')
                    ), 'allow_add' => FALSE,
                    'allow_delete' => true
                        )
                )
                ->getForm();
        $aray = ['ROLE_ADMIN', 'ROLE_USER', 'ROLE_CHEF'];

        return $this->render('BallackTimeSheetBundle:Default:role.html.twig', array(
                    'form' => $form->createView(), 'user' => $user, 'ras' => $aray));
    }

    public function addRoleAction(Employe $employe, $role) {
        $em = $this->getDoctrine()->getManager();
        //$userManager = $this->get('fos_user.user_manager');
        $user = $employe->getCompte();
        /* $user->addRole($role); */
        if (!$user) {
            //throw new NotFoundHttpException("Film non trouvé");
            throw $this->createNotFoundException('inexistant');
        }
        $em->persist($employe->getCompte()->addRole($role));
        $em->flush();
        //$userManager->updateUser($user);


        return $this->redirect($this->generateUrl('employe_index', array('id' => $employe->getId(),
        )));
    }

    public function deleteRoleAction($id, $role) {

        $userManager = $this->get('fos_user.user_manager');
        $user = $userManager->findUserBy(array('id' => $id));
        $user->removeRole($role);
        if (!$user) {
            //throw new NotFoundHttpException("Film non trouvé");
            throw $this->createNotFoundException('inexistant');
        }
        $userManager->updateUser($user);


        return $this->redirect($this->generateUrl('employe_index'));
    }

    /**
     * Finds and displays a Employe entity.
     *
     */
    public function profilAction() {
        $em = $this->getDoctrine()->getManager();
        $util = new Util();
        $dictionary = new DictionaryProjet();
        $user = $this->get('Security.context')->gettoken()->getuser();
        $employe = $em->getRepository('BallackTimeSheetBundle:Employe')->findOneByCompte($user);
        $chef = $em->getRepository('BallackTimeSheetBundle:Employe')->findChefDepartement($employe->getDepartement());
        $collegues = $em->getRepository('BallackTimeSheetBundle:Employe')->findByDepartement($employe->getDepartement());
        $Contrat = $em->getRepository('BallackTimeSheetBundle:Contrat')->findOneBy(array('employe' => $employe, 'etat' => true));
        /* $Contrat=$em->getRepository('BallackTimeSheetBundle:Contrat')->findBy(array('employe' => $employe)); */
        $test = date('D', $employe->getDateNaissance()->getTimestamp());
        // $test1= date_add($test, date_interval_create_from_date_string('10 days'));
        $format = date_format($employe->getDateNaissance(), 'Y-m-d H:i:s');
        $interval = new DateInterval('P2D');
        $times = 0;
        foreach ($employe->getProjets() as $monProjet) {
            $mesActivites = $em->getRepository('BallackTimeSheetBundle:Activite')->findByProjet($monProjet);
            foreach ($mesActivites as $monActivite) {
                $times+=$util->to_seconds($monActivite->getTimeStart()->diff($monActivite->getTimeStop())) / (3600);
            }
        }
        $dictionary->setProjet($employe->getProjets());
        return $this->render('BallackTimeSheetBundle:employe:profil.html.twig', array(
                    'employe' => $employe, 'chef' => $chef, 'collegues' => $collegues, 'contrat' => $Contrat,
                    'essai' => $util->to_seconds($Contrat->getStartDate()->diff($Contrat->getEndDate())) / (3600 * 24),
                    'test' => $util->NbJoursNonOuvrable($Contrat->getStartDate(), $Contrat->getEndDate()), 'dictionary' => $dictionary,
        ));
    }

    public function uploadAction(Request $request, Employe $employe) {
        $em = $this->getDoctrine()->getManager();
        $file = $request->files->get('file');
        $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
        $file->move(
                $this->getParameter('images_directory'), $fileName
        );
        $employe->setImage($fileName);
        $em->persist($employe);
        $em->flush();

        return $this->redirectToRoute('employe_edit', array('id' => $employe->getId()));
    }

    public function addImageAction(Request $request, Employe $employe) {
        $em = $this->getDoctrine()->getManager();
        if ($request->getMethod() == "POST") {
            $file = $request->files->get('file');
            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
            $file->move(
                    $this->getParameter('images_directory'), $fileName
            );
            $employe->setImage($fileName);
            $em->persist($employe);
            $em->flush();

            return $this->redirectToRoute('employe_addImage', array('id' => $employe->getId()));
        }

        return $this->render('BallackTimeSheetBundle:employe:addImage.html.twig', array(
                    'employe' => $employe,
        ));
    }

}
